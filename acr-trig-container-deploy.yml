# ACR resource trigger that deploys containers to dev, staging, preprod (deployment slot) and prod Web App for containers.
# Includes Azure App configuration export based on tags
# Images tagged with dev* will only push to dev environment.
# Images tagged with prod will deploy to staging, preprod (slot) and prod.
# Images to staging will be locked and then unlocked after prod or on error/cancel to prevent other deployments during testing.
# Includes security gate for Azure Defender for containers.
# Note: requires external variables passed in using shared group and/or pipeline vars.

trigger:
  - none # Disable trigger on the repository itself

# Trigger from container registry
resources:
  containers:
  - container: CONTAINER REF
    type: ACR  
    azureSubscription: SERVICE CONNECTION
    resourceGroup: RESOURCE GROUP
    registry: REGISTRY
    repository: REPOSITORY
    trigger:
      tags:
        include:
        - prod*
        - dev*

variables:
- name: SourceRegistryName
  value: $(resources.container.plcontainer.registry)
- name: Repository
  value: $(resources.container.plcontainer.repository)
- name: Tag
  value: $(resources.container.plcontainer.tag)
- name: IsDev
  value: $[startsWith(variables['resources.container.plcontainer.tag'], 'dev')]
- name: IsProd
  value: $[startsWith(variables['resources.container.plcontainer.tag'], 'prod')]
- group: shared-vars

stages:
  - stage: Dev
    condition: eq(variables.IsDev, 'true')
    displayName: Dev
    jobs:
      # Track deployments on the environment.
    - deployment: DeployContainers
      displayName: Deploy Containers
      pool:
        vmimage: ubuntu-latest
      # Creates an environment if it doesn't exist.
      environment: '$(AppName)-Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureCLI@2
              displayName: Web App Config
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  ID=$(az webapp show --name 'app-$(AppShortName)-uks-dev-001' --resource-group 'rg-$(AppShortName)-dev-001' --query id --output tsv) 
                  az appconfig kv export --connection-string '$(AppConfigConnectionString)' --destination appservice --label '$(AppShortName)Dev' --yes --appservice-account $ID
            - task: AzureRmWebAppDeployment@4
              displayName: Web App Deploy
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(NonProdServiceConnectionName)'
                appType: 'webAppContainer'
                WebAppName: 'app-$(AppShortName)-uks-dev-001'
                DockerNamespace: '$(NonProdAcrName).azurecr.io'
                DockerRepository: '$(Repository)'
                DockerImageTag: '$(Tag)'
                AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(NonProdAcrName).azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(NonProdAcrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(NonProdAcrPassword)'
            - task: AzureAppServiceManage@0
              displayName: Web App Restart
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                Action: 'Restart Azure App Service'
                WebAppName: 'app-$(AppShortName)-uks-dev-001'
            - task: AzureCLI@2
              displayName: BG App Config
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  ID=$(az webapp show --name 'app-$(AppShortName)-bg-uks-dev-001' --resource-group 'rg-$(AppShortName)-dev-001' --query id --output tsv) 
                  az appconfig kv export --connection-string '$(AppConfigConnectionString)' --destination appservice --label '$(AppShortName)Dev' --yes --appservice-account $ID
            - task: AzureRmWebAppDeployment@4
              displayName: BG App Deploy
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(NonProdServiceConnectionName)'
                appType: 'webAppContainer'
                WebAppName: 'app-$(AppShortName)-bg-uks-dev-001'
                DockerNamespace: '$(NonProdAcrName).azurecr.io'
                DockerRepository: '$(Repository)'
                DockerImageTag: '$(Tag)'
                AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(NonProdAcrName).azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(NonProdAcrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(NonProdAcrPassword)'
            - task: AzureAppServiceManage@0
              displayName: BG App Restart
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                Action: 'Restart Azure App Service'
                WebAppName: 'app-$(AppShortName)-bg-uks-dev-001'
  - stage: Staging
    condition: eq(variables.IsProd, 'true')
    displayName: Staging
    jobs:
      # Track deployments on the environment.
    - deployment: DeployContainer
      displayName: Deploy Container
      pool:
        vmimage: ubuntu-latest
      # Creates an environment if it doesn't exist.
      environment: '$(AppName)-Staging'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureCLI@2
              displayName: Web App Config
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  ID=$(az webapp show --name 'app-$(AppShortName)-uks-stag-001' --resource-group 'rg-$(AppShortName)-stag-001' --query id --output tsv) 
                  az appconfig kv export --connection-string '$(AppConfigConnectionString)' --destination appservice --label '$(AppShortName)Stag' --yes --appservice-account $ID
            - task: AzureRmWebAppDeployment@4
              displayName: Web App Deploy
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(NonProdServiceConnectionName)'
                appType: 'webAppContainer'
                WebAppName: 'app-$(AppShortName)-uks-stag-001'
                DockerNamespace: '$(NonProdAcrName).azurecr.io'
                DockerRepository: '$(Repository)'
                DockerImageTag: '$(Tag)'
                AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(NonProdAcrName).azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(NonProdAcrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(NonProdAcrPassword)'
            - task: AzureAppServiceManage@0
              displayName: Web App Restart
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                Action: 'Restart Azure App Service'
                WebAppName: 'app-$(AppShortName)-uks-stag-001'
            - task: AzureCLI@2
              displayName: BG App Config
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  ID=$(az webapp show --name 'app-$(AppShortName)-bg-uks-stag-001' --resource-group 'rg-$(AppShortName)-stag-001' --query id --output tsv) 
                  az appconfig kv export --connection-string '$(AppConfigConnectionString)' --destination appservice --label '$(AppShortName)Stag' --yes --appservice-account $ID
            - task: AzureRmWebAppDeployment@4
              displayName: BG App Deploy
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(NonProdServiceConnectionName)'
                appType: 'webAppContainer'
                WebAppName: 'app-$(AppShortName)-bg-uks-stag-001'
                DockerNamespace: '$(NonProdAcrName).azurecr.io'
                DockerRepository: '$(Repository)'
                DockerImageTag: '$(Tag)'
                AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(NonProdAcrName).azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(NonProdAcrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(NonProdAcrPassword)'
            - task: AzureAppServiceManage@0
              displayName: BG App Restart
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                Action: 'Restart Azure App Service'
                WebAppName: 'app-$(AppShortName)-bg-uks-stag-001'
            - task: AzureCLI@2
              displayName: Lock ACR Image
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az acr repository update `
                      --name $(NonProdAcrName) `
                      --image $(Repository):$(Tag) `
                      --write-enabled false
  - stage: PreProduction
    condition: eq(variables.IsProd, 'true')
    displayName: PreProduction
    dependsOn: Staging
    jobs:
      # Track deployments on the environment.
    - deployment: DeployContainer
      displayName: Deploy Container
      pool:
        vmimage: ubuntu-latest
      # Creates an environment if it doesn't exist.
      environment: '$(AppName)-Prod'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureCLI@2
              inputs:
                azureSubscription: '$(NonProdServiceConnectionName)'
                scriptType: 'pscore'
                scriptLocation: 'scriptPath'
                # Security Gate powershell script in same folder
                scriptPath: '$(Build.SourcesDirectory)/tasks/ImageScanSummaryAssessmentGate.ps1'
                arguments: '-registryName $(NonProdAcrName) -repository $(Repository) -tag $(Tag)'
            - task: AzureCLI@2
              displayName: Promote image
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az acr import `
                      --name $(ProdAcrName) `
                      --source $(Repository):$(Tag) `
                      --image $(Repository):$(Tag) `
                      --registry $(NonProdAcrId)
            - task: AzureAppServiceManage@0
              displayName: Stop Web App Slot
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                Action: 'Stop Azure App Service'
                WebAppName: 'app-$(AppShortName)-uks-prod-001'
                SpecifySlotOrASE: true
                ResourceGroupName: 'rg-$(AppShortName)-prod-001'
                Slot: 'preprod'
            - task: AzureCLI@2
              displayName: Web App Slot Config
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  ID=$(az webapp show --name 'app-$(AppShortName)-uks-prod-001' --resource-group 'rg-$(AppShortName)-prod-001' --slot 'preprod' --query id --output tsv) 
                  az appconfig kv export --connection-string '$(AppConfigConnectionString)' --destination appservice --label '$(AppShortName)Prod' --yes --appservice-account $ID
            - task: AzureRmWebAppDeployment@4
              displayName: Web App Deploy to Slot
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(ProdServiceConnectionName)'
                appType: 'webAppContainer'
                WebAppName: 'app-$(AppShortName)-uks-prod-001'
                deployToSlotOrASE: true
                ResourceGroupName: 'rg-$(AppShortName)-prod-001'
                SlotName: 'preprod'
                DockerNamespace: '$(ProdAcrName).azurecr.io'
                DockerRepository: '$(Repository)'
                DockerImageTag: '$(Tag)'
                AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(ProdAcrName).azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(ProdAcrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(ProdAcrPassword)'
            - task: AzureAppServiceManage@0
              displayName: Web App Start Slot
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                Action: 'Start Azure App Service'
                WebAppName: 'app-$(AppShortName)-uks-prod-001'
                SpecifySlotOrASE: true
                ResourceGroupName: 'rg-$(AppShortName)-prod-001'
                Slot: 'preprod'
  - stage: Production
    condition: eq(variables.IsProd, 'true')
    displayName: Production
    dependsOn: PreProduction
    jobs:
      # Track deployments on the environment.
    - deployment: GoLive
      displayName: Go Live
      pool:
        vmimage: ubuntu-latest
      # Creates an environment if it doesn't exist.
      environment: '$(AppName)-Prod'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureAppServiceManage@0
              displayName: Swap To Production
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                Action: 'Swap Slots'
                WebAppName: 'app-$(AppShortName)-uks-prod-001'
                ResourceGroupName: 'rg-$(AppShortName)-prod-001'
                SourceSlot: 'preprod'
            - task: AzureAppServiceManage@0
              displayName: Stop PreProduction Slot
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                Action: 'Stop Azure App Service'
                WebAppName: 'app-$(AppShortName)-uks-prod-001'
                SpecifySlotOrASE: true
                ResourceGroupName: 'rg-$(AppShortName)-prod-001'
                Slot: 'preprod'
            - task: AzureCLI@2
              displayName: BG App Config
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  ID=$(az webapp show --name 'app-$(AppShortName)-bg-uks-prod-001' --resource-group 'rg-$(AppShortName)-prod-001' --query id --output tsv) 
                  az appconfig kv export --connection-string '$(AppConfigConnectionString)' --destination appservice --label '$(AppShortName)Prod' --yes --appservice-account $ID
            - task: AzureRmWebAppDeployment@4
              displayName: BG App Deploy
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(NonProdServiceConnectionName)'
                appType: 'webAppContainer'
                WebAppName: 'app-$(AppShortName)-bg-uks-prod-001'
                DockerNamespace: '$(ProdAcrName).azurecr.io'
                DockerRepository: '$(Repository)'
                DockerImageTag: '$(Tag)'
                AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(ProdAcrName).azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(ProdAcrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(ProdAcrPassword)'
            - task: AzureAppServiceManage@0
              displayName: BG App Restart
              inputs:
                azureSubscription: '$(ProdServiceConnectionName)'
                Action: 'Restart Azure App Service'
                WebAppName: 'app-$(AppShortName)-bg-uks-prod-001'
  - stage: UnlockImage
    condition: and(always(), eq(variables.IsProd, 'true'))
    displayName: UnlockImage
    dependsOn: PreProduction
    jobs:
    - job:
      pool:
        vmimage: ubuntu-latest
      steps:
      - task: AzureCLI@2
        displayName: Unlock Image
        inputs:
          azureSubscription: '$(NonProdServiceConnectionName)'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az acr repository update `
                --name $(NonProdAcrName) `
                --image $(Repository) `
                --delete-enabled true `
                --write-enabled true
