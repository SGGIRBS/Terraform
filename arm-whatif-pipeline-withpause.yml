# Preview and Deploy ARM templates using Powershell. Deployments are split by solution tiers. Includes approvals between stages and a deployment pause for manual validation E.G For certificate upload.

trigger:
- none

variables:
- group: YOUR VARIABLE GROUP HERE

stages:
  - stage: Preview
    jobs:
      - job: 'Preview'
        displayName: Preview Changes
        pool:
          vmImage: ubuntu-latest
        steps:
        #Preview Management resources
        - task: AzurePowerShell@5
          displayName: Preview Management resources
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: ' 
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))

            New-AzDeployment -TemplateFile ArmTemplates/management.json `
                          -Location "$(LocationName)" `
                          -TemplateParameterFile "$(ManagementParametersFilePathInRepo)" `
                          -Subscription-Abreviation "$(Subscription-Abreviation)" `
                          -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                          -Region-Type "$(Region-Type)" `
                          -TestEnvironment $testEnvironment `
                          -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                          -Location-Abreviation "$(Location-Abreviation)" `
                          -LocationName "$(LocationName)" `
                          -PairedLocationName "$(PairedLocationName)" `
                          -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                          -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                          -VNet-Name "$(VNet-Name)" `
                          -WhatIf
            '
            azurePowerShellVersion: 'LatestVersion'
        #Preview App resources
        - task: AzurePowerShell@5
          displayName: Preview App resources
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: ' 
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))

            New-AzDeployment -TemplateFile ArmTemplates/app.json `
                          -Location "$(LocationName)" `
                          -TemplateParameterFile "$(AppParametersFilePathInRepo)" `
                          -Subscription-Abreviation "$(Subscription-Abreviation)" `
                          -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                          -Region-Type "$(Region-Type)" `
                          -TestEnvironment $testEnvironment `
                          -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                          -Location-Abreviation "$(Location-Abreviation)" `
                          -LocationName "$(LocationName)" `
                          -PairedLocationName "$(PairedLocationName)" `
                          -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                          -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                          -VNet-Name "$(VNet-Name)" `
                          -WhatIf
            '
            azurePowerShellVersion: 'LatestVersion'
        #Preview Data resources
        - task: AzurePowerShell@5
          displayName: Preview Data resources
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: '
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))
            
            $DataResourceGroupName = "RG-$(Subscription-And-Environment-Abreviation)-DATA"
            
            New-AzResourceGroup -Name $DataResourceGroupName -Location "$(LocationName)" -Force

            New-AzResourceGroupDeployment -TemplateFile ArmTemplates/data.json `
                            -ResourceGroupName "$DataResourceGroupName" `
                            -TemplateParameterFile "$(DataParametersFilePathInRepo)" `
                            -Subscription-Abreviation "$(Subscription-Abreviation)" `
                            -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                            -Region-Type "$(Region-Type)" `
                            -TestEnvironment $testEnvironment `
                            -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                            -Location-Abreviation "$(Location-Abreviation)" `
                            -LocationName "$(LocationName)" `
                            -PairedLocationName "$(PairedLocationName)" `
                            -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                            -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                            -VNet-Name "$(VNet-Name)" `
                            -WhatIf
            '
            azurePowerShellVersion: 'LatestVersion'
        #Preview Application gateway
        - task: AzurePowerShell@5
          displayName: Preview Application gateway
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: '
            <#
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))

            $AppGwResourceGroupName = "RG-$(Subscription-And-Environment-Abreviation)-AG"

            New-AzResourceGroup -Name $AppGwResourceGroupName -Location "$(LocationName)" -Force

            New-AzResourceGroupDeployment -TemplateFile ArmTemplates/appgw.json `
                            -ResourceGroupName $AppGwResourceGroupName `
                            -TemplateParameterFile "$(AppgwParametersFilePathInRepo)" `
                            -Subscription-Abreviation "$(Subscription-Abreviation)" `
                            -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                            -Region-Type "$(Region-Type)" `
                            -TestEnvironment $testEnvironment `
                            -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                            -Location-Abreviation "$(Location-Abreviation)" `
                            -LocationName "$(LocationName)" `
                            -PairedLocationName "$(PairedLocationName)" `
                            -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                            -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                            -VNet-Name "$(VNet-Name)" `
                            -WhatIf
            #>'
            azurePowerShellVersion: 'LatestVersion'

  - stage: Deploy
    dependsOn: Preview
    jobs:
      - job: 'Management'
        displayName: Deploy Management Changes
        pool:
          vmImage: ubuntu-latest
        steps:
        
        #Management resources
        - task: AzurePowerShell@5
          displayName: Deploy Management resources
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: ' 
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))

            New-AzDeployment -TemplateFile ArmTemplates/management.json `
                          -Location "$(LocationName)" `
                          -TemplateParameterFile "$(ManagementParametersFilePathInRepo)" `
                          -Subscription-Abreviation "$(Subscription-Abreviation)" `
                          -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                          -Region-Type "$(Region-Type)" `
                          -TestEnvironment $testEnvironment `
                          -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                          -Location-Abreviation "$(Location-Abreviation)" `
                          -LocationName "$(LocationName)" `
                          -PairedLocationName "$(PairedLocationName)" `
                          -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                          -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                          -VNet-Name "$(VNet-Name)"
            '
            azurePowerShellVersion: 'LatestVersion'

      # Wait for certificate upload   
      - job: Certificate
        dependsOn: Management
        displayName: Wait for certificate upload
        pool: server
        timeoutInMinutes: 4320 # job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
            instructions: 'Please upload certificate to Key Vault and click resume'
            onTimeout: 'resume'

      # Deploy remaining solution resources
      - job: 'Solution'
        dependsOn: Certificate
        displayName: Deploy Solution Changes
        pool:
          vmImage: ubuntu-latest
        steps:

        #App resources
        - task: AzurePowerShell@5
          displayName: Deploy App resources
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: ' 
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))

            New-AzDeployment -TemplateFile ArmTemplates/app.json `
                          -Location "$(LocationName)" `
                          -TemplateParameterFile "$(AppParametersFilePathInRepo)" `
                          -Subscription-Abreviation "$(Subscription-Abreviation)" `
                          -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                          -Region-Type "$(Region-Type)" `
                          -TestEnvironment $testEnvironment `
                          -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                          -Location-Abreviation "$(Location-Abreviation)" `
                          -LocationName "$(LocationName)" `
                          -PairedLocationName "$(PairedLocationName)" `
                          -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                          -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                          -VNet-Name "$(VNet-Name)"
            '
            azurePowerShellVersion: 'LatestVersion'

        #Data resources
        - task: AzurePowerShell@5
          displayName: Deploy Data resources
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: '
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))
            
            $DataResourceGroupName = "RG-$(Subscription-And-Environment-Abreviation)-DATA"
            
            New-AzResourceGroup -Name $DataResourceGroupName -Location "$(LocationName)" -Force

            New-AzResourceGroupDeployment -TemplateFile ArmTemplates/data.json `
                            -ResourceGroupName "$DataResourceGroupName" `
                            -TemplateParameterFile "$(DataParametersFilePathInRepo)" `
                            -Subscription-Abreviation "$(Subscription-Abreviation)" `
                            -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                            -Region-Type "$(Region-Type)" `
                            -TestEnvironment $testEnvironment `
                            -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                            -Location-Abreviation "$(Location-Abreviation)" `
                            -LocationName "$(LocationName)" `
                            -PairedLocationName "$(PairedLocationName)" `
                            -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                            -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                            -VNet-Name "$(VNet-Name)"
            '
            azurePowerShellVersion: 'LatestVersion'

        #Application gateway
        - task: AzurePowerShell@5
          displayName: Deploy Application Gateway
          inputs:
            ScriptType: 'InlineScript'
            azureSubscription: '$(azureServiceConnection-Name)'
            Inline: '
            $testEnvironment = [System.Convert]::ToBoolean($(TestEnvironment))

            $AppGwResourceGroupName = "RG-$(Subscription-And-Environment-Abreviation)-AG"

            New-AzResourceGroup -Name $AppGwResourceGroupName -Location "$(LocationName)" -Force

            New-AzResourceGroupDeployment -TemplateFile ArmTemplates/appgw.json `
                            -ResourceGroupName $AppGwResourceGroupName `
                            -TemplateParameterFile "$(AppgwParametersFilePathInRepo)" `
                            -Subscription-Abreviation "$(Subscription-Abreviation)" `
                            -Subscription-And-Environment-Abreviation "$(Subscription-And-Environment-Abreviation)" `
                            -Region-Type "$(Region-Type)" `
                            -TestEnvironment $testEnvironment `
                            -TestEnvironment-Abreviation "$(TestEnvironment-Abreviation)" `
                            -Location-Abreviation "$(Location-Abreviation)" `
                            -LocationName "$(LocationName)" `
                            -PairedLocationName "$(PairedLocationName)" `
                            -LogAnalyticsResourceGroup "$(LogAnalyticsResourceGroup)" `
                            -LogAnalyticsWorkspaceName "$(LogAnalyticsWorkspaceName)" `
                            -VNet-Name "$(VNet-Name)"
            '
            azurePowerShellVersion: 'LatestVersion'

        # track deployments on the environment
      - deployment: YOUR DEPLOYMENT NAME HERE
        dependsOn: Solution
        pool:
          vmImage: ubuntu-latest
        # creates an environment if it doesn’t exist
        environment: YOUR ENV NAME HERE
        strategy:
          # default deployment strategy
          runOnce:
            deploy:
              steps:
              - script: echo A message or script here
